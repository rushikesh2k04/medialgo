{
    "name": "NFTRevoke",
    "structs": {},
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "asset",
                    "name": "asset_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_config_clawback",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in_to_asset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrpay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "grant_access",
            "args": [
                {
                    "type": "account",
                    "name": "holder"
                },
                {
                    "type": "uint64",
                    "name": "ends_at"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "revoke_access",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergency_revoke",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Allow immediate revocation before expiry (e.g., if the prescription was misused)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_status",
            "args": [],
            "returns": {
                "type": "(address,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Returns (current holder, expiry time, active flag)",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "assetid": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRpZA=="
                },
                "access_holder": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWNjZXNzX2hvbGRlcg=="
                },
                "access_expires_at": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWNjZXNzX2V4cGlyZXNfYXQ="
                },
                "access_active": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWNjZXNzX2FjdGl2ZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        381
                    ],
                    "errorMessage": "Access already active"
                },
                {
                    "pc": [
                        429
                    ],
                    "errorMessage": "Access not yet expired"
                },
                {
                    "pc": [
                        421,
                        474
                    ],
                    "errorMessage": "No active access"
                },
                {
                    "pc": [
                        128,
                        158,
                        170,
                        182,
                        204,
                        226,
                        244
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        285
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        248
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        131,
                        161,
                        173,
                        185,
                        207,
                        229
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        379,
                        418,
                        471,
                        524
                    ],
                    "errorMessage": "check self.access_active exists"
                },
                {
                    "pc": [
                        427,
                        520
                    ],
                    "errorMessage": "check self.access_expires_at exists"
                },
                {
                    "pc": [
                        440,
                        485,
                        516
                    ],
                    "errorMessage": "check self.access_holder exists"
                },
                {
                    "pc": [
                        326,
                        397,
                        436,
                        481
                    ],
                    "errorMessage": "check self.assetid exists"
                },
                {
                    "pc": [
                        217
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEEJgQNYWNjZXNzX2FjdGl2ZQ1hY2Nlc3NfaG9sZGVyEWFjY2Vzc19leHBpcmVzX2F0B2Fzc2V0aWQxG0EAOIIHBDzzGzEEVdTEwwQVdFNaBGr+eagE9MMq6gTrD8NcBDbfNho2GgCOBwB2AGQATgA4ACwAIAACIkMxGRREMRhEiAF6TBZMFk4CUExQgAQVH3x1TFCwI0MxGRREMRhEiAEvI0MxGRREMRhEiADuI0MxGRREMRhENhoBF8AcNhoCF4gAriNDMRkURDEYRDEWIwlJOBAjEkSIAFsjQzEZFEQxGEQ2GgEXwDCIACcjQzEZFEQxGBRENhoBF8AwiAACI0OKAQAri/9nKTIDZyoiZygiZ4mKAQCL/3EHRDEAEkSxMQAyCrIssimL/7IhgQOyECKyAbOJigEAMQAyCRJEMgoiK2VETEsBcABFARREi/84BzIKEkSL/zgIMgEyEAgSRLEyCiKyErIUshEkshAisgGziYoCACIoZUQURCmL/mcqi/9nKCNnsSIrZUQjshKyEYv+shQkshAisgGziSIoZUQjEkQyByIqZUQNRLEyCiIrZUQiKWVEI7ISshOyEbIUJLIQIrIBsygiZykyA2cqImeJIihlRCMSRLEyCiIrZUQiKWVEI7ISshOyEbIUJLIQIrIBsygiZykyA2cqImeJIillRCIqZUQiKGVEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}