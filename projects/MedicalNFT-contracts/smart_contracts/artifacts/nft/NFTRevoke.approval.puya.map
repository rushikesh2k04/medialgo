{
  "version": 3,
  "sources": [
    "../../nft/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AA8FK;;AAAA;AAAA;AAAA;;AAAA;AA9FL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA8FK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAvCL;;;AAAA;AAAA;;AAAA;;;AAAA;AAuCK;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAvBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBK;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAbL;;;AAAA;AAAA;;AAaK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AANL;;;AAAA;AAAA;;AAMK;;;AAAA;;AAAL;;;AAEQ;AAAA;;AAAA;AACA;AAAqB;;AAArB;AACA;AAAyB;AAAzB;AACA;AAAqB;AAArB;;AAER;;;AAEe;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACA;AAEa;;AACA;;;;;;;;;;AAHb;;;;AAIQ;;;AAJR;;AAOR;;;AAEe;;AAAc;;AAAd;AAAP;AACW;;AAAqD;AAAA;AAAA;AAAA;AAArD;AAAA;;AAAA;;AAAA;;AAAJ;AAAP;AAEO;;AAAA;;AAAmB;;AAAnB;AAAP;AAEO;;AAAA;;AAAiB;;AAAqB;;AAArB;AAAjB;AAAP;AAEA;AAEoB;;AACF;;;;;;;AAHlB;;;AAIQ;;;AAJR;;AAOR;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAP;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAqB;AAArB;AAGA;AAEe;AAAA;AAAA;AAAA;AACE;;;;;;;;;AAHjB;;;AAIQ;;;AAJR;;AASO;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AACO;;AAA0B;AAAA;AAAA;AAAA;AAA1B;AAAP;AAGA;AACmB;;AACJ;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAJjB;;;AAKQ;;;AALR;AAQA;AAAqB;AAArB;AACA;AAAqB;;AAArB;AACA;AAAyB;AAAzB;;AAKO;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAP;AAEA;AACmB;;AACJ;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAJjB;;;AAKQ;;;AALR;AAQA;AAAqB;AAArB;AACA;AAAqB;;AAArB;AACA;AAAyB;AAAzB;;AAKO;AAAA;AAAA;AAAA;AAAoB;AAAA;AAAA;AAAA;AAAwB;AAAA;AAAA;AAAA;AAAnD;AACR;;;AAEe;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACA;AACa;;AAGM;;;;;;;;;;;;;AAJnB;;;AAKQ;;;AALR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4"
    },
    "6": {
      "op": "bytecblock \"access_active\" \"access_holder\" \"access_expires_at\" \"assetid\""
    },
    "62": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "64": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "67": {
      "op": "pushbytess 0x3cf31b31 0x55d4c4c3 0x1574535a 0x6afe79a8 0xf4c32aea 0xeb0fc35c 0x36df361a 0xeb7c63ff // method \"create_application(asset)void\", method \"asset_config_clawback(asset)void\", method \"opt_in_to_asset(pay)void\", method \"grant_access(account,uint64)void\", method \"revoke_access()void\", method \"emergency_revoke()void\", method \"get_status()(address,uint64,uint64)\", method \"asset_transfer_from_app(asset,account)void\"",
      "defined_out": [
        "Method(asset_config_clawback(asset)void)",
        "Method(asset_transfer_from_app(asset,account)void)",
        "Method(create_application(asset)void)",
        "Method(emergency_revoke()void)",
        "Method(get_status()(address,uint64,uint64))",
        "Method(grant_access(account,uint64)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(revoke_access()void)"
      ],
      "stack_out": [
        "Method(create_application(asset)void)",
        "Method(asset_config_clawback(asset)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(grant_access(account,uint64)void)",
        "Method(revoke_access()void)",
        "Method(emergency_revoke()void)",
        "Method(get_status()(address,uint64,uint64))",
        "Method(asset_transfer_from_app(asset,account)void)"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(asset_config_clawback(asset)void)",
        "Method(asset_transfer_from_app(asset,account)void)",
        "Method(create_application(asset)void)",
        "Method(emergency_revoke()void)",
        "Method(get_status()(address,uint64,uint64))",
        "Method(grant_access(account,uint64)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(revoke_access()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(asset)void)",
        "Method(asset_config_clawback(asset)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(grant_access(account,uint64)void)",
        "Method(revoke_access()void)",
        "Method(emergency_revoke()void)",
        "Method(get_status()(address,uint64,uint64))",
        "Method(asset_transfer_from_app(asset,account)void)",
        "tmp%2#0"
      ]
    },
    "112": {
      "op": "match main_create_application_route@3 main_asset_config_clawback_route@4 main_opt_in_to_asset_route@5 main_grant_access_route@6 main_revoke_access_route@7 main_emergency_revoke_route@8 main_get_status_route@9 main_asset_transfer_from_app_route@10",
      "stack_out": []
    },
    "130": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "131": {
      "op": "return",
      "stack_out": []
    },
    "132": {
      "block": "main_asset_transfer_from_app_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "134": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "135": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "136": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "138": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "139": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "142": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "143": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "145": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "148": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%46#0"
      ]
    },
    "149": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%45#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%47#0"
      ]
    },
    "151": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.asset_transfer_from_app",
      "op": "callsub asset_transfer_from_app",
      "stack_out": []
    },
    "154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "155": {
      "op": "return",
      "stack_out": []
    },
    "156": {
      "block": "main_get_status_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "158": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "159": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "160": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "162": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "163": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.get_status",
      "op": "callsub get_status",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "166": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "167": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "168": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%0#0",
        "val_as_bytes%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "169": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "170": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "175": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x151f7c75"
      ]
    },
    "181": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "182": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "183": {
      "op": "log",
      "stack_out": []
    },
    "184": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "185": {
      "op": "return",
      "stack_out": []
    },
    "186": {
      "block": "main_emergency_revoke_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "188": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "189": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "190": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "193": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.emergency_revoke",
      "op": "callsub emergency_revoke"
    },
    "196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "block": "main_revoke_access_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "201": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "202": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "204": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "205": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.revoke_access",
      "op": "callsub revoke_access"
    },
    "208": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "209": {
      "op": "return",
      "stack_out": []
    },
    "210": {
      "block": "main_grant_access_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "212": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "213": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "217": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "220": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "221": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "223": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "226": {
      "op": "btoi",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "227": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.grant_access",
      "op": "callsub grant_access",
      "stack_out": []
    },
    "230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "return",
      "stack_out": []
    },
    "232": {
      "block": "main_opt_in_to_asset_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "234": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "235": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "236": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "238": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "239": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "241": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "1"
      ]
    },
    "242": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "243": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "244": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "246": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "247": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "248": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "249": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.opt_in_to_asset",
      "op": "callsub opt_in_to_asset",
      "stack_out": []
    },
    "252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "return",
      "stack_out": []
    },
    "254": {
      "block": "main_asset_config_clawback_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "256": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "257": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "258": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "260": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "261": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "264": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "265": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "267": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.asset_config_clawback",
      "op": "callsub asset_config_clawback",
      "stack_out": []
    },
    "270": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "271": {
      "op": "return",
      "stack_out": []
    },
    "272": {
      "block": "main_create_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "274": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "275": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "276": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "278": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "279": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "280": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "283": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "284": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "286": {
      "callsub": "smart_contracts.nft.contract.NFTRevoke.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "289": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": []
    },
    "291": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.create_application",
      "params": {
        "asset_id#0": "uint64"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "294": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\""
      ],
      "stack_out": [
        "\"assetid\""
      ]
    },
    "295": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ],
      "stack_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ]
    },
    "297": {
      "op": "app_global_put",
      "stack_out": []
    },
    "298": {
      "op": "bytec_1 // \"access_holder\"",
      "defined_out": [
        "\"access_holder\""
      ],
      "stack_out": [
        "\"access_holder\""
      ]
    },
    "299": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"access_holder\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"access_holder\"",
        "materialized_values%0#0"
      ]
    },
    "301": {
      "op": "app_global_put",
      "stack_out": []
    },
    "302": {
      "op": "bytec_2 // \"access_expires_at\"",
      "defined_out": [
        "\"access_expires_at\""
      ],
      "stack_out": [
        "\"access_expires_at\""
      ]
    },
    "303": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"access_expires_at\"",
        "0"
      ],
      "stack_out": [
        "\"access_expires_at\"",
        "0"
      ]
    },
    "304": {
      "op": "app_global_put",
      "stack_out": []
    },
    "305": {
      "op": "bytec_0 // \"access_active\"",
      "defined_out": [
        "\"access_active\""
      ],
      "stack_out": [
        "\"access_active\""
      ]
    },
    "306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"access_active\"",
        "0"
      ]
    },
    "307": {
      "op": "app_global_put",
      "stack_out": []
    },
    "308": {
      "retsub": true,
      "op": "retsub"
    },
    "309": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.asset_config_clawback",
      "params": {
        "asset#0": "uint64"
      },
      "block": "asset_config_clawback",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "312": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "314": {
      "op": "asset_params_get AssetManager",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "316": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "317": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "319": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "320": {
      "op": "assert",
      "stack_out": []
    },
    "321": {
      "op": "itxn_begin"
    },
    "322": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "324": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "326": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "328": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "330": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "332": {
      "op": "itxn_field ConfigAsset",
      "stack_out": []
    },
    "334": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "336": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "338": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "339": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "341": {
      "op": "itxn_submit"
    },
    "342": {
      "retsub": true,
      "op": "retsub"
    },
    "343": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.opt_in_to_asset",
      "params": {
        "mbrpay#0": "uint64"
      },
      "block": "opt_in_to_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "346": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "348": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "350": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "351": {
      "op": "assert",
      "stack_out": []
    },
    "352": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "354": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "355": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"assetid\""
      ]
    },
    "356": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "357": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "358": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "359": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "361": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "363": {
      "op": "bury 1",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%5#0"
      ]
    },
    "365": {
      "op": "!",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%6#0"
      ]
    },
    "366": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "367": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "mbrpay#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "mbrpay#0 (copy)"
      ]
    },
    "369": {
      "op": "gtxns Receiver",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%7#0"
      ]
    },
    "371": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "373": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%9#0"
      ]
    },
    "374": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "375": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "mbrpay#0 (copy)"
      ]
    },
    "377": {
      "op": "gtxns Amount",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0"
      ]
    },
    "379": {
      "op": "global MinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "381": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "383": {
      "op": "+",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "384": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%14#0"
      ]
    },
    "385": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "386": {
      "op": "itxn_begin"
    },
    "387": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "389": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "390": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "392": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "394": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "396": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "397": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "400": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "402": {
      "op": "itxn_submit"
    },
    "403": {
      "retsub": true,
      "op": "retsub"
    },
    "404": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.grant_access",
      "params": {
        "holder#0": "bytes",
        "ends_at#0": "uint64"
      },
      "block": "grant_access",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "407": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "408": {
      "op": "bytec_0 // \"access_active\"",
      "defined_out": [
        "\"access_active\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"access_active\""
      ]
    },
    "409": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "410": {
      "error": "check self.access_active exists",
      "op": "assert // check self.access_active exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "411": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "412": {
      "error": "Access already active",
      "op": "assert // Access already active",
      "stack_out": []
    },
    "413": {
      "op": "bytec_1 // \"access_holder\"",
      "defined_out": [
        "\"access_holder\""
      ],
      "stack_out": [
        "\"access_holder\""
      ]
    },
    "414": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"access_holder\"",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "\"access_holder\"",
        "holder#0 (copy)"
      ]
    },
    "416": {
      "op": "app_global_put",
      "stack_out": []
    },
    "417": {
      "op": "bytec_2 // \"access_expires_at\"",
      "defined_out": [
        "\"access_expires_at\""
      ],
      "stack_out": [
        "\"access_expires_at\""
      ]
    },
    "418": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"access_expires_at\"",
        "ends_at#0 (copy)"
      ],
      "stack_out": [
        "\"access_expires_at\"",
        "ends_at#0 (copy)"
      ]
    },
    "420": {
      "op": "app_global_put",
      "stack_out": []
    },
    "421": {
      "op": "bytec_0 // \"access_active\"",
      "stack_out": [
        "\"access_active\""
      ]
    },
    "422": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"access_active\"",
        "1"
      ],
      "stack_out": [
        "\"access_active\"",
        "1"
      ]
    },
    "423": {
      "op": "app_global_put",
      "stack_out": []
    },
    "424": {
      "op": "itxn_begin"
    },
    "425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "426": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetid\""
      ]
    },
    "427": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "428": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "429": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "430": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "432": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "434": {
      "op": "frame_dig -2",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "436": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "438": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "439": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "441": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "442": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "444": {
      "op": "itxn_submit"
    },
    "445": {
      "retsub": true,
      "op": "retsub"
    },
    "446": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.revoke_access",
      "params": {},
      "block": "revoke_access",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "447": {
      "op": "bytec_0 // \"access_active\"",
      "defined_out": [
        "\"access_active\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"access_active\""
      ]
    },
    "448": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "449": {
      "error": "check self.access_active exists",
      "op": "assert // check self.access_active exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "450": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "451": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "error": "No active access",
      "op": "assert // No active access",
      "stack_out": []
    },
    "453": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "456": {
      "op": "bytec_2 // \"access_expires_at\"",
      "defined_out": [
        "\"access_expires_at\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"access_expires_at\""
      ]
    },
    "457": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "458": {
      "error": "check self.access_expires_at exists",
      "op": "assert // check self.access_expires_at exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "459": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "460": {
      "error": "Access not yet expired",
      "op": "assert // Access not yet expired",
      "stack_out": []
    },
    "461": {
      "op": "itxn_begin"
    },
    "462": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "464": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "465": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"assetid\""
      ]
    },
    "466": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "467": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "468": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "469": {
      "op": "bytec_1 // \"access_holder\"",
      "defined_out": [
        "\"access_holder\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "0",
        "\"access_holder\""
      ]
    },
    "470": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "471": {
      "error": "check self.access_holder exists",
      "op": "assert // check self.access_holder exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "472": {
      "op": "intc_1 // 1",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "473": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "475": {
      "op": "itxn_field AssetSender",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "477": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "479": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "481": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "482": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "484": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "485": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "487": {
      "op": "itxn_submit"
    },
    "488": {
      "op": "bytec_0 // \"access_active\"",
      "stack_out": [
        "\"access_active\""
      ]
    },
    "489": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"access_active\"",
        "0"
      ]
    },
    "490": {
      "op": "app_global_put",
      "stack_out": []
    },
    "491": {
      "op": "bytec_1 // \"access_holder\"",
      "stack_out": [
        "\"access_holder\""
      ]
    },
    "492": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"access_holder\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"access_holder\"",
        "materialized_values%0#0"
      ]
    },
    "494": {
      "op": "app_global_put",
      "stack_out": []
    },
    "495": {
      "op": "bytec_2 // \"access_expires_at\"",
      "stack_out": [
        "\"access_expires_at\""
      ]
    },
    "496": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"access_expires_at\"",
        "0"
      ]
    },
    "497": {
      "op": "app_global_put",
      "stack_out": []
    },
    "498": {
      "retsub": true,
      "op": "retsub"
    },
    "499": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.emergency_revoke",
      "params": {},
      "block": "emergency_revoke",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "500": {
      "op": "bytec_0 // \"access_active\"",
      "defined_out": [
        "\"access_active\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"access_active\""
      ]
    },
    "501": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "502": {
      "error": "check self.access_active exists",
      "op": "assert // check self.access_active exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "503": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "504": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "505": {
      "error": "No active access",
      "op": "assert // No active access",
      "stack_out": []
    },
    "506": {
      "op": "itxn_begin"
    },
    "507": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "509": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "510": {
      "op": "bytec_3 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"assetid\""
      ]
    },
    "511": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "512": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ]
    },
    "513": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "514": {
      "op": "bytec_1 // \"access_holder\"",
      "defined_out": [
        "\"access_holder\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "0",
        "\"access_holder\""
      ]
    },
    "515": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "516": {
      "error": "check self.access_holder exists",
      "op": "assert // check self.access_holder exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "517": {
      "op": "intc_1 // 1",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "518": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "520": {
      "op": "itxn_field AssetSender",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ]
    },
    "522": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "524": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "526": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "527": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "530": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "532": {
      "op": "itxn_submit"
    },
    "533": {
      "op": "bytec_0 // \"access_active\"",
      "stack_out": [
        "\"access_active\""
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"access_active\"",
        "0"
      ]
    },
    "535": {
      "op": "app_global_put",
      "stack_out": []
    },
    "536": {
      "op": "bytec_1 // \"access_holder\"",
      "stack_out": [
        "\"access_holder\""
      ]
    },
    "537": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"access_holder\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"access_holder\"",
        "materialized_values%0#0"
      ]
    },
    "539": {
      "op": "app_global_put",
      "stack_out": []
    },
    "540": {
      "op": "bytec_2 // \"access_expires_at\"",
      "defined_out": [
        "\"access_expires_at\""
      ],
      "stack_out": [
        "\"access_expires_at\""
      ]
    },
    "541": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"access_expires_at\"",
        "0"
      ]
    },
    "542": {
      "op": "app_global_put",
      "stack_out": []
    },
    "543": {
      "retsub": true,
      "op": "retsub"
    },
    "544": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.get_status",
      "params": {},
      "block": "get_status",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "545": {
      "op": "bytec_1 // \"access_holder\"",
      "defined_out": [
        "\"access_holder\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"access_holder\""
      ]
    },
    "546": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "547": {
      "error": "check self.access_holder exists",
      "op": "assert // check self.access_holder exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "548": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "549": {
      "op": "bytec_2 // \"access_expires_at\"",
      "defined_out": [
        "\"access_expires_at\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"access_expires_at\""
      ]
    },
    "550": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "551": {
      "error": "check self.access_expires_at exists",
      "op": "assert // check self.access_expires_at exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "553": {
      "op": "bytec_0 // \"access_active\"",
      "defined_out": [
        "\"access_active\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"access_active\""
      ]
    },
    "554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "555": {
      "error": "check self.access_active exists",
      "op": "assert // check self.access_active exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "556": {
      "retsub": true,
      "op": "retsub"
    },
    "557": {
      "subroutine": "smart_contracts.nft.contract.NFTRevoke.asset_transfer_from_app",
      "params": {
        "asset#0": "uint64",
        "receiver#0": "bytes"
      },
      "block": "asset_transfer_from_app",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "560": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "562": {
      "op": "asset_params_get AssetManager",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "564": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "565": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "567": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "568": {
      "op": "assert",
      "stack_out": []
    },
    "569": {
      "op": "itxn_begin"
    },
    "570": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "572": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "1"
      ]
    },
    "573": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "575": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "asset#0 (copy)"
      ]
    },
    "577": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "579": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "receiver#0 (copy)"
      ]
    },
    "581": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "583": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "585": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "586": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "589": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "591": {
      "op": "itxn_submit"
    },
    "592": {
      "retsub": true,
      "op": "retsub"
    }
  }
}