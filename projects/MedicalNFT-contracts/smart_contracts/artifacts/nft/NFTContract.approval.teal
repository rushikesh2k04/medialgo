#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "assetid"
    // smart_contracts/nft/contract.py:6
    // class NFTContract(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0x3cf31b31 0x1574535a 0xe8a70e53 0xeb7c63ff // method "create_application(asset)void", method "opt_in_to_asset(pay)void", method "asset_opt_in_sender(asset)void", method "asset_transfer_from_app(asset,account)void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_opt_in_to_asset_route@4 main_asset_opt_in_sender_route@5 main_asset_transfer_from_app_route@6

main_after_if_else@10:
    // smart_contracts/nft/contract.py:6
    // class NFTContract(ARC4Contract):
    intc_0 // 0
    return

main_asset_transfer_from_app_route@6:
    // smart_contracts/nft/contract.py:42-43
    // # example: ASSET_TRANSFER
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/nft/contract.py:6
    // class NFTContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/nft/contract.py:42-43
    // # example: ASSET_TRANSFER
    // @abimethod
    callsub asset_transfer_from_app
    intc_1 // 1
    return

main_asset_opt_in_sender_route@5:
    // smart_contracts/nft/contract.py:31
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/nft/contract.py:6
    // class NFTContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/nft/contract.py:31
    // @abimethod
    callsub asset_opt_in_sender
    intc_1 // 1
    return

main_opt_in_to_asset_route@4:
    // smart_contracts/nft/contract.py:14-15
    //  # opt in to the asset into the smart contract
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/nft/contract.py:6
    // class NFTContract(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/nft/contract.py:14-15
    //  # opt in to the asset into the smart contract
    // @abimethod()
    callsub opt_in_to_asset
    intc_1 // 1
    return

main_create_application_route@3:
    // smart_contracts/nft/contract.py:9-10
    // #create the app
    // @abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/nft/contract.py:6
    // class NFTContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/nft/contract.py:9-10
    // #create the app
    // @abimethod(allow_actions=["NoOp"], create="require")
    callsub create_application
    intc_1 // 1
    return


// smart_contracts.nft.contract.NFTContract.create_application(asset_id: uint64) -> void:
create_application:
    // smart_contracts/nft/contract.py:9-11
    // #create the app
    // @abimethod(allow_actions=["NoOp"], create="require")
    // def create_application(self, asset_id: Asset) -> None:
    proto 1 0
    // smart_contracts/nft/contract.py:12
    // self.assetid = asset_id.id
    bytec_0 // "assetid"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.nft.contract.NFTContract.opt_in_to_asset(mbrpay: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/nft/contract.py:14-16
    //  # opt in to the asset into the smart contract
    // @abimethod()
    // def opt_in_to_asset(self, mbrpay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/nft/contract.py:17
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/nft/contract.py:18
    // assert not Global.current_application_address.is_opted_in(Asset(self.assetid))
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_0 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    swap
    dig 1
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/nft/contract.py:20
    // assert mbrpay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/nft/contract.py:22
    // assert mbrpay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/nft/contract.py:24-29
    // itxn.AssetTransfer(
    //     xfer_asset= self.assetid,
    //     asset_receiver= Global.current_application_address,
    //     asset_amount= 0,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/nft/contract.py:26
    // asset_receiver= Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/nft/contract.py:27
    // asset_amount= 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/nft/contract.py:24
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/nft/contract.py:28
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/nft/contract.py:24-29
    // itxn.AssetTransfer(
    //     xfer_asset= self.assetid,
    //     asset_receiver= Global.current_application_address,
    //     asset_amount= 0,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.nft.contract.NFTContract.asset_opt_in_sender(asset: uint64) -> void:
asset_opt_in_sender:
    // smart_contracts/nft/contract.py:31-32
    // @abimethod
    // def asset_opt_in_sender(self, asset: Asset) -> None:
    proto 1 0
    // smart_contracts/nft/contract.py:34-39
    // itxn.AssetTransfer(
    //     asset_receiver=Txn.sender,
    //     xfer_asset=asset,
    //     asset_amount=0,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/nft/contract.py:35
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/nft/contract.py:37
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/nft/contract.py:34
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/nft/contract.py:38
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/nft/contract.py:34-39
    // itxn.AssetTransfer(
    //     asset_receiver=Txn.sender,
    //     xfer_asset=asset,
    //     asset_amount=0,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.nft.contract.NFTContract.asset_transfer_from_app(asset: uint64, receiver: bytes) -> void:
asset_transfer_from_app:
    // smart_contracts/nft/contract.py:42-44
    // # example: ASSET_TRANSFER
    // @abimethod
    // def asset_transfer_from_app(self, asset: Asset, receiver: Account ) -> None:
    proto 2 0
    // smart_contracts/nft/contract.py:45-51
    // itxn.AssetTransfer(
    //     sender = Global.current_application_address,
    //     asset_receiver = receiver,
    //     xfer_asset = asset,
    //     asset_amount = 1,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/nft/contract.py:46
    // sender = Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/nft/contract.py:49
    // asset_amount = 1,
    intc_1 // 1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    frame_dig -1
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/nft/contract.py:45
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/nft/contract.py:50
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/nft/contract.py:45-51
    // itxn.AssetTransfer(
    //     sender = Global.current_application_address,
    //     asset_receiver = receiver,
    //     xfer_asset = asset,
    //     asset_amount = 1,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub
