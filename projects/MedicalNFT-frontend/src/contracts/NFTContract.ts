/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"NFTContract","structs":{},"methods":[{"name":"create_application","args":[{"type":"asset","name":"asset_id"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in_to_asset","args":[{"type":"pay","name":"mbrpay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_opt_in_sender","args":[{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_transfer_from_app","args":[{"type":"asset","name":"asset"},{"type":"account","name":"receiver"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetid":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRpZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[61,85,103,125],"errorMessage":"OnCompletion is not NoOp"},{"pc":[129],"errorMessage":"can only call when creating"},{"pc":[64,88,106],"errorMessage":"can only call when not creating"},{"pc":[163],"errorMessage":"check self.assetid exists"},{"pc":[116],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAEEJgEHYXNzZXRpZDEbQQAjggQEPPMbMQQVdFNaBOinDlME63xj/zYaAI4EAEIALAAaAAIiQzEZFEQxGEQ2GgEXwDA2GgIXwByIAJkjQzEZFEQxGEQ2GgEXwDCIAHAjQzEZFEQxGEQxFiMJSTgQIxJEiAAdI0MxGRREMRgURDYaARfAMIgAAiNDigEAKIv/Z4mKAQAxADIJEkQyCiIoZURMSwFwAEUBFESL/zgHMgoSRIv/OAgyATIQCBJEsTIKIrISshSyESSyECKyAbOJigEAsTEAIrISi/+yEbIUJLIQIrIBs4mKAgCxMgojshKL/rIRi/+yFLIAJLIQIrIBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the NftContract contract
 */
export type NftContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(asset)void': {
      assetId: bigint
    }
    'opt_in_to_asset(pay)void': {
      mbrpay: AppMethodCallTransactionArgument
    }
    'asset_opt_in_sender(asset)void': {
      asset: bigint
    }
    'asset_transfer_from_app(asset,account)void': {
      asset: bigint
      receiver: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(asset)void': [assetId: bigint]
    'opt_in_to_asset(pay)void': [mbrpay: AppMethodCallTransactionArgument]
    'asset_opt_in_sender(asset)void': [asset: bigint]
    'asset_transfer_from_app(asset,account)void': [asset: bigint, receiver: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type NftContractReturns = {
  'create_application(asset)void': void
  'opt_in_to_asset(pay)void': void
  'asset_opt_in_sender(asset)void': void
  'asset_transfer_from_app(asset,account)void': void
}

/**
 * Defines the types of available calls and state of the NftContract smart contract.
 */
export type NftContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(asset)void' | 'create_application', {
      argsObj: NftContractArgs['obj']['create_application(asset)void']
      argsTuple: NftContractArgs['tuple']['create_application(asset)void']
      returns: NftContractReturns['create_application(asset)void']
    }>
    & Record<'opt_in_to_asset(pay)void' | 'opt_in_to_asset', {
      argsObj: NftContractArgs['obj']['opt_in_to_asset(pay)void']
      argsTuple: NftContractArgs['tuple']['opt_in_to_asset(pay)void']
      returns: NftContractReturns['opt_in_to_asset(pay)void']
    }>
    & Record<'asset_opt_in_sender(asset)void' | 'asset_opt_in_sender', {
      argsObj: NftContractArgs['obj']['asset_opt_in_sender(asset)void']
      argsTuple: NftContractArgs['tuple']['asset_opt_in_sender(asset)void']
      returns: NftContractReturns['asset_opt_in_sender(asset)void']
    }>
    & Record<'asset_transfer_from_app(asset,account)void' | 'asset_transfer_from_app', {
      argsObj: NftContractArgs['obj']['asset_transfer_from_app(asset,account)void']
      argsTuple: NftContractArgs['tuple']['asset_transfer_from_app(asset,account)void']
      returns: NftContractReturns['asset_transfer_from_app(asset,account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetid: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type NftContractSignatures = keyof NftContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NftContractNonVoidMethodSignatures = keyof NftContractTypes['methods'] extends infer T ? T extends keyof NftContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NftContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NftContractSignatures> = NftContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NftContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NftContractSignatures> = NftContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = NftContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type NftContractCreateCallParams =
  | Expand<CallParams<NftContractArgs['obj']['create_application(asset)void'] | NftContractArgs['tuple']['create_application(asset)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<NftContractArgs['obj']['create_application(asset)void'] | NftContractArgs['tuple']['create_application(asset)void']> & {method: 'create_application(asset)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type NftContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NftContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NftContract smart contract
 */
export abstract class NftContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends NftContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(asset)void':
            return NftContractParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the NFTContract smart contract using the create_application(asset)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<NftContractArgs['obj']['create_application(asset)void'] | NftContractArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(asset)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the opt_in_to_asset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<NftContractArgs['obj']['opt_in_to_asset(pay)void'] | NftContractArgs['tuple']['opt_in_to_asset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrpay],
    }
  }
  /**
   * Constructs a no op call for the asset_opt_in_sender(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetOptInSender(params: CallParams<NftContractArgs['obj']['asset_opt_in_sender(asset)void'] | NftContractArgs['tuple']['asset_opt_in_sender(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_opt_in_sender(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the asset_transfer_from_app(asset,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetTransferFromApp(params: CallParams<NftContractArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftContractArgs['tuple']['asset_transfer_from_app(asset,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_transfer_from_app(asset,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NFTContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NftContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NftContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NftContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NftContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NFTContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NftContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? NftContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (NftContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new NftContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTContract smart contract using the create_application(asset)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<NftContractArgs['obj']['create_application(asset)void'] | NftContractArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(NftContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTContract smart contract using the create_application(asset)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<NftContractArgs['obj']['create_application(asset)void'] | NftContractArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(NftContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTContract smart contract using an ABI method call using the create_application(asset)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<NftContractArgs['obj']['create_application(asset)void'] | NftContractArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(NftContractParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | NftContractReturns['create_application(asset)void']) }, appClient: new NftContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NFTContract smart contract
 */
export class NftContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NftContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the NftContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NftContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NftContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NftContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NftContractClient> {
    return new NftContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NftContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NftContractClient> {
    return new NftContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the NFTContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTContract smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<NftContractArgs['obj']['opt_in_to_asset(pay)void'] | NftContractArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the NFTContract smart contract using the `asset_opt_in_sender(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetOptInSender: (params: CallParams<NftContractArgs['obj']['asset_opt_in_sender(asset)void'] | NftContractArgs['tuple']['asset_opt_in_sender(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftContractParamsFactory.assetOptInSender(params))
    },

    /**
     * Makes a call to the NFTContract smart contract using the `asset_transfer_from_app(asset,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetTransferFromApp: (params: CallParams<NftContractArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftContractArgs['tuple']['asset_transfer_from_app(asset,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftContractParamsFactory.assetTransferFromApp(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the NFTContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTContract smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<NftContractArgs['obj']['opt_in_to_asset(pay)void'] | NftContractArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the NFTContract smart contract using the `asset_opt_in_sender(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetOptInSender: (params: CallParams<NftContractArgs['obj']['asset_opt_in_sender(asset)void'] | NftContractArgs['tuple']['asset_opt_in_sender(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftContractParamsFactory.assetOptInSender(params))
    },

    /**
     * Makes a call to the NFTContract smart contract using the `asset_transfer_from_app(asset,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetTransferFromApp: (params: CallParams<NftContractArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftContractArgs['tuple']['asset_transfer_from_app(asset,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftContractParamsFactory.assetTransferFromApp(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the NFTContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTContract smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<NftContractArgs['obj']['opt_in_to_asset(pay)void'] | NftContractArgs['tuple']['opt_in_to_asset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftContractParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | NftContractReturns['opt_in_to_asset(pay)void'])}
    },

    /**
     * Makes a call to the NFTContract smart contract using the `asset_opt_in_sender(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetOptInSender: async (params: CallParams<NftContractArgs['obj']['asset_opt_in_sender(asset)void'] | NftContractArgs['tuple']['asset_opt_in_sender(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftContractParamsFactory.assetOptInSender(params))
      return {...result, return: result.return as unknown as (undefined | NftContractReturns['asset_opt_in_sender(asset)void'])}
    },

    /**
     * Makes a call to the NFTContract smart contract using the `asset_transfer_from_app(asset,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetTransferFromApp: async (params: CallParams<NftContractArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftContractArgs['tuple']['asset_transfer_from_app(asset,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftContractParamsFactory.assetTransferFromApp(params))
      return {...result, return: result.return as unknown as (undefined | NftContractReturns['asset_transfer_from_app(asset,account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NftContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NFTContract app
   */
  state = {
    /**
     * Methods to access global state for the current NFTContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetid: result.assetid,
        }
      },
      /**
       * Get the current value of the assetid key in global state
       */
      assetid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetid")) as bigint | undefined },
    },
  }

  public newGroup(): NftContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a opt_in_to_asset(pay)void method call against the NFTContract contract
       */
      optInToAsset(params: CallParams<NftContractArgs['obj']['opt_in_to_asset(pay)void'] | NftContractArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_opt_in_sender(asset)void method call against the NFTContract contract
       */
      assetOptInSender(params: CallParams<NftContractArgs['obj']['asset_opt_in_sender(asset)void'] | NftContractArgs['tuple']['asset_opt_in_sender(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetOptInSender(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_transfer_from_app(asset,account)void method call against the NFTContract contract
       */
      assetTransferFromApp(params: CallParams<NftContractArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftContractArgs['tuple']['asset_transfer_from_app(asset,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetTransferFromApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the NFTContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NftContractComposer
  }
}
export type NftContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the opt_in_to_asset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<NftContractArgs['obj']['opt_in_to_asset(pay)void'] | NftContractArgs['tuple']['opt_in_to_asset(pay)void']>): NftContractComposer<[...TReturns, NftContractReturns['opt_in_to_asset(pay)void'] | undefined]>

  /**
   * Calls the asset_opt_in_sender(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetOptInSender(params?: CallParams<NftContractArgs['obj']['asset_opt_in_sender(asset)void'] | NftContractArgs['tuple']['asset_opt_in_sender(asset)void']>): NftContractComposer<[...TReturns, NftContractReturns['asset_opt_in_sender(asset)void'] | undefined]>

  /**
   * Calls the asset_transfer_from_app(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransferFromApp(params?: CallParams<NftContractArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftContractArgs['tuple']['asset_transfer_from_app(asset,account)void']>): NftContractComposer<[...TReturns, NftContractReturns['asset_transfer_from_app(asset,account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the NFTContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NftContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NftContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NftContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NftContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NftContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NftContractComposerResults<TReturns>>
}
export type NftContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

