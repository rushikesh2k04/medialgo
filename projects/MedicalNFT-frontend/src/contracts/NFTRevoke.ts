/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"NFTRevoke","structs":{},"methods":[{"name":"create_application","args":[{"type":"asset","name":"asset_id"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_config_clawback","args":[{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in_to_asset","args":[{"type":"pay","name":"mbrpay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"grant_access","args":[{"type":"account","name":"holder"},{"type":"uint64","name":"ends_at"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"revoke_access","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"emergency_revoke","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allow immediate revocation before expiry (e.g., if the prescription was misused)","events":[],"recommendations":{}},{"name":"get_status","args":[],"returns":{"type":"(address,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Returns (current holder, expiry time, active flag)","events":[],"recommendations":{}},{"name":"asset_transfer_from_app","args":[{"type":"asset","name":"asset"},{"type":"account","name":"receiver"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetid":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRpZA=="},"access_holder":{"keyType":"AVMString","valueType":"address","key":"YWNjZXNzX2hvbGRlcg=="},"access_expires_at":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjZXNzX2V4cGlyZXNfYXQ="},"access_active":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjZXNzX2FjdGl2ZQ=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[412],"errorMessage":"Access already active"},{"pc":[460],"errorMessage":"Access not yet expired"},{"pc":[452,505],"errorMessage":"No active access"},{"pc":[135,159,189,201,213,235,257,275],"errorMessage":"OnCompletion is not NoOp"},{"pc":[316,564],"errorMessage":"asset exists"},{"pc":[279],"errorMessage":"can only call when creating"},{"pc":[138,162,192,204,216,238,260],"errorMessage":"can only call when not creating"},{"pc":[410,449,502,555],"errorMessage":"check self.access_active exists"},{"pc":[458,551],"errorMessage":"check self.access_expires_at exists"},{"pc":[471,516,547],"errorMessage":"check self.access_holder exists"},{"pc":[357,428,467,512],"errorMessage":"check self.assetid exists"},{"pc":[248],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAEEJgQNYWNjZXNzX2FjdGl2ZQ1hY2Nlc3NfaG9sZGVyEWFjY2Vzc19leHBpcmVzX2F0B2Fzc2V0aWQxG0EAP4IIBDzzGzEEVdTEwwQVdFNaBGr+eagE9MMq6gTrD8NcBDbfNhoE63xj/zYaAI4IAI4AfABmAFAARAA4ABoAAiJDMRkURDEYRDYaARfAMDYaAhfAHIgBkyNDMRkURDEYRIgBekwWTBZOAlBMUIAEFR98dUxQsCNDMRkURDEYRIgBLyNDMRkURDEYRIgA7iNDMRkURDEYRDYaARfAHDYaAheIAK4jQzEZFEQxGEQxFiMJSTgQIxJEiABbI0MxGRREMRhENhoBF8AwiAAnI0MxGRREMRgURDYaARfAMIgAAiNDigEAK4v/ZykyA2cqImcoImeJigEAi/9xB0QxABJEsTEAMgqyLLIpi/+yIYEDshAisgGziYoBADEAMgkSRDIKIitlRExLAXAARQEURIv/OAcyChJEi/84CDIBMhAIEkSxMgoishKyFLIRJLIQIrIBs4mKAgAiKGVEFEQpi/5nKov/ZygjZ7EiK2VEI7ISshGL/rIUJLIQIrIBs4kiKGVEIxJEMgciKmVEDUSxMgoiK2VEIillRCOyErITshGyFCSyECKyAbMoImcpMgNnKiJniSIoZUQjEkSxMgoiK2VEIillRCOyErITshGyFCSyECKyAbMoImcpMgNnKiJniSIpZUQiKmVEIihlRImKAgCL/nEHRDEAEkSxMgojshKL/rIRi/+yFLIAJLIQIrIBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the NftRevoke contract
 */
export type NftRevokeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(asset)void': {
      assetId: bigint
    }
    'asset_config_clawback(asset)void': {
      asset: bigint
    }
    'opt_in_to_asset(pay)void': {
      mbrpay: AppMethodCallTransactionArgument
    }
    'grant_access(account,uint64)void': {
      holder: Uint8Array | string
      endsAt: bigint | number
    }
    'revoke_access()void': Record<string, never>
    'emergency_revoke()void': Record<string, never>
    'get_status()(address,uint64,uint64)': Record<string, never>
    'asset_transfer_from_app(asset,account)void': {
      asset: bigint
      receiver: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(asset)void': [assetId: bigint]
    'asset_config_clawback(asset)void': [asset: bigint]
    'opt_in_to_asset(pay)void': [mbrpay: AppMethodCallTransactionArgument]
    'grant_access(account,uint64)void': [holder: Uint8Array | string, endsAt: bigint | number]
    'revoke_access()void': []
    'emergency_revoke()void': []
    'get_status()(address,uint64,uint64)': []
    'asset_transfer_from_app(asset,account)void': [asset: bigint, receiver: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type NftRevokeReturns = {
  'create_application(asset)void': void
  'asset_config_clawback(asset)void': void
  'opt_in_to_asset(pay)void': void
  'grant_access(account,uint64)void': void
  'revoke_access()void': void
  'emergency_revoke()void': void
  'get_status()(address,uint64,uint64)': [string, bigint, bigint]
  'asset_transfer_from_app(asset,account)void': void
}

/**
 * Defines the types of available calls and state of the NftRevoke smart contract.
 */
export type NftRevokeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(asset)void' | 'create_application', {
      argsObj: NftRevokeArgs['obj']['create_application(asset)void']
      argsTuple: NftRevokeArgs['tuple']['create_application(asset)void']
      returns: NftRevokeReturns['create_application(asset)void']
    }>
    & Record<'asset_config_clawback(asset)void' | 'asset_config_clawback', {
      argsObj: NftRevokeArgs['obj']['asset_config_clawback(asset)void']
      argsTuple: NftRevokeArgs['tuple']['asset_config_clawback(asset)void']
      returns: NftRevokeReturns['asset_config_clawback(asset)void']
    }>
    & Record<'opt_in_to_asset(pay)void' | 'opt_in_to_asset', {
      argsObj: NftRevokeArgs['obj']['opt_in_to_asset(pay)void']
      argsTuple: NftRevokeArgs['tuple']['opt_in_to_asset(pay)void']
      returns: NftRevokeReturns['opt_in_to_asset(pay)void']
    }>
    & Record<'grant_access(account,uint64)void' | 'grant_access', {
      argsObj: NftRevokeArgs['obj']['grant_access(account,uint64)void']
      argsTuple: NftRevokeArgs['tuple']['grant_access(account,uint64)void']
      returns: NftRevokeReturns['grant_access(account,uint64)void']
    }>
    & Record<'revoke_access()void' | 'revoke_access', {
      argsObj: NftRevokeArgs['obj']['revoke_access()void']
      argsTuple: NftRevokeArgs['tuple']['revoke_access()void']
      returns: NftRevokeReturns['revoke_access()void']
    }>
    & Record<'emergency_revoke()void' | 'emergency_revoke', {
      argsObj: NftRevokeArgs['obj']['emergency_revoke()void']
      argsTuple: NftRevokeArgs['tuple']['emergency_revoke()void']
      returns: NftRevokeReturns['emergency_revoke()void']
    }>
    & Record<'get_status()(address,uint64,uint64)' | 'get_status', {
      argsObj: NftRevokeArgs['obj']['get_status()(address,uint64,uint64)']
      argsTuple: NftRevokeArgs['tuple']['get_status()(address,uint64,uint64)']
      returns: NftRevokeReturns['get_status()(address,uint64,uint64)']
    }>
    & Record<'asset_transfer_from_app(asset,account)void' | 'asset_transfer_from_app', {
      argsObj: NftRevokeArgs['obj']['asset_transfer_from_app(asset,account)void']
      argsTuple: NftRevokeArgs['tuple']['asset_transfer_from_app(asset,account)void']
      returns: NftRevokeReturns['asset_transfer_from_app(asset,account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetid: bigint
        accessHolder: string
        accessExpiresAt: bigint
        accessActive: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type NftRevokeSignatures = keyof NftRevokeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NftRevokeNonVoidMethodSignatures = keyof NftRevokeTypes['methods'] extends infer T ? T extends keyof NftRevokeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NftRevoke smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NftRevokeSignatures> = NftRevokeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NftRevoke smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NftRevokeSignatures> = NftRevokeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = NftRevokeTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type NftRevokeCreateCallParams =
  | Expand<CallParams<NftRevokeArgs['obj']['create_application(asset)void'] | NftRevokeArgs['tuple']['create_application(asset)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<NftRevokeArgs['obj']['create_application(asset)void'] | NftRevokeArgs['tuple']['create_application(asset)void']> & {method: 'create_application(asset)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type NftRevokeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NftRevokeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NftRevoke smart contract
 */
export abstract class NftRevokeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends NftRevokeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(asset)void':
            return NftRevokeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the NFTRevoke smart contract using the create_application(asset)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<NftRevokeArgs['obj']['create_application(asset)void'] | NftRevokeArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(asset)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the asset_config_clawback(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetConfigClawback(params: CallParams<NftRevokeArgs['obj']['asset_config_clawback(asset)void'] | NftRevokeArgs['tuple']['asset_config_clawback(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_config_clawback(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the opt_in_to_asset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<NftRevokeArgs['obj']['opt_in_to_asset(pay)void'] | NftRevokeArgs['tuple']['opt_in_to_asset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrpay],
    }
  }
  /**
   * Constructs a no op call for the grant_access(account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static grantAccess(params: CallParams<NftRevokeArgs['obj']['grant_access(account,uint64)void'] | NftRevokeArgs['tuple']['grant_access(account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'grant_access(account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.endsAt],
    }
  }
  /**
   * Constructs a no op call for the revoke_access()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static revokeAccess(params: CallParams<NftRevokeArgs['obj']['revoke_access()void'] | NftRevokeArgs['tuple']['revoke_access()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'revoke_access()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergency_revoke()void ABI method
   *
   * Allow immediate revocation before expiry (e.g., if the prescription was misused)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyRevoke(params: CallParams<NftRevokeArgs['obj']['emergency_revoke()void'] | NftRevokeArgs['tuple']['emergency_revoke()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergency_revoke()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_status()(address,uint64,uint64) ABI method
   *
   * Returns (current holder, expiry time, active flag)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStatus(params: CallParams<NftRevokeArgs['obj']['get_status()(address,uint64,uint64)'] | NftRevokeArgs['tuple']['get_status()(address,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_status()(address,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the asset_transfer_from_app(asset,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetTransferFromApp(params: CallParams<NftRevokeArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftRevokeArgs['tuple']['asset_transfer_from_app(asset,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_transfer_from_app(asset,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NFTRevoke smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NftRevokeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NftRevokeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NftRevokeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NftRevokeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NFTRevoke smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NftRevokeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? NftRevokeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (NftRevokeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new NftRevokeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTRevoke smart contract using the create_application(asset)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<NftRevokeArgs['obj']['create_application(asset)void'] | NftRevokeArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(NftRevokeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTRevoke smart contract using the create_application(asset)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<NftRevokeArgs['obj']['create_application(asset)void'] | NftRevokeArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(NftRevokeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NFTRevoke smart contract using an ABI method call using the create_application(asset)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<NftRevokeArgs['obj']['create_application(asset)void'] | NftRevokeArgs['tuple']['create_application(asset)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(NftRevokeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | NftRevokeReturns['create_application(asset)void']) }, appClient: new NftRevokeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NFTRevoke smart contract
 */
export class NftRevokeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NftRevokeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the NftRevoke app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NftRevokeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NftRevokeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NftRevokeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NftRevokeClient> {
    return new NftRevokeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NftRevokeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NftRevokeClient> {
    return new NftRevokeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the NFTRevoke smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `asset_config_clawback(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetConfigClawback: (params: CallParams<NftRevokeArgs['obj']['asset_config_clawback(asset)void'] | NftRevokeArgs['tuple']['asset_config_clawback(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftRevokeParamsFactory.assetConfigClawback(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<NftRevokeArgs['obj']['opt_in_to_asset(pay)void'] | NftRevokeArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftRevokeParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `grant_access(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    grantAccess: (params: CallParams<NftRevokeArgs['obj']['grant_access(account,uint64)void'] | NftRevokeArgs['tuple']['grant_access(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftRevokeParamsFactory.grantAccess(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `revoke_access()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    revokeAccess: (params: CallParams<NftRevokeArgs['obj']['revoke_access()void'] | NftRevokeArgs['tuple']['revoke_access()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(NftRevokeParamsFactory.revokeAccess(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `emergency_revoke()void` ABI method.
     *
     * Allow immediate revocation before expiry (e.g., if the prescription was misused)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyRevoke: (params: CallParams<NftRevokeArgs['obj']['emergency_revoke()void'] | NftRevokeArgs['tuple']['emergency_revoke()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(NftRevokeParamsFactory.emergencyRevoke(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `get_status()(address,uint64,uint64)` ABI method.
     *
     * Returns (current holder, expiry time, active flag)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getStatus: (params: CallParams<NftRevokeArgs['obj']['get_status()(address,uint64,uint64)'] | NftRevokeArgs['tuple']['get_status()(address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(NftRevokeParamsFactory.getStatus(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `asset_transfer_from_app(asset,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetTransferFromApp: (params: CallParams<NftRevokeArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftRevokeArgs['tuple']['asset_transfer_from_app(asset,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NftRevokeParamsFactory.assetTransferFromApp(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the NFTRevoke smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `asset_config_clawback(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetConfigClawback: (params: CallParams<NftRevokeArgs['obj']['asset_config_clawback(asset)void'] | NftRevokeArgs['tuple']['asset_config_clawback(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftRevokeParamsFactory.assetConfigClawback(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<NftRevokeArgs['obj']['opt_in_to_asset(pay)void'] | NftRevokeArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftRevokeParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `grant_access(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    grantAccess: (params: CallParams<NftRevokeArgs['obj']['grant_access(account,uint64)void'] | NftRevokeArgs['tuple']['grant_access(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftRevokeParamsFactory.grantAccess(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `revoke_access()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    revokeAccess: (params: CallParams<NftRevokeArgs['obj']['revoke_access()void'] | NftRevokeArgs['tuple']['revoke_access()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(NftRevokeParamsFactory.revokeAccess(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `emergency_revoke()void` ABI method.
     *
     * Allow immediate revocation before expiry (e.g., if the prescription was misused)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyRevoke: (params: CallParams<NftRevokeArgs['obj']['emergency_revoke()void'] | NftRevokeArgs['tuple']['emergency_revoke()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(NftRevokeParamsFactory.emergencyRevoke(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `get_status()(address,uint64,uint64)` ABI method.
     *
     * Returns (current holder, expiry time, active flag)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getStatus: (params: CallParams<NftRevokeArgs['obj']['get_status()(address,uint64,uint64)'] | NftRevokeArgs['tuple']['get_status()(address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(NftRevokeParamsFactory.getStatus(params))
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `asset_transfer_from_app(asset,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetTransferFromApp: (params: CallParams<NftRevokeArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftRevokeArgs['tuple']['asset_transfer_from_app(asset,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NftRevokeParamsFactory.assetTransferFromApp(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the NFTRevoke smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `asset_config_clawback(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetConfigClawback: async (params: CallParams<NftRevokeArgs['obj']['asset_config_clawback(asset)void'] | NftRevokeArgs['tuple']['asset_config_clawback(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftRevokeParamsFactory.assetConfigClawback(params))
      return {...result, return: result.return as unknown as (undefined | NftRevokeReturns['asset_config_clawback(asset)void'])}
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<NftRevokeArgs['obj']['opt_in_to_asset(pay)void'] | NftRevokeArgs['tuple']['opt_in_to_asset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftRevokeParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | NftRevokeReturns['opt_in_to_asset(pay)void'])}
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `grant_access(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    grantAccess: async (params: CallParams<NftRevokeArgs['obj']['grant_access(account,uint64)void'] | NftRevokeArgs['tuple']['grant_access(account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftRevokeParamsFactory.grantAccess(params))
      return {...result, return: result.return as unknown as (undefined | NftRevokeReturns['grant_access(account,uint64)void'])}
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `revoke_access()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    revokeAccess: async (params: CallParams<NftRevokeArgs['obj']['revoke_access()void'] | NftRevokeArgs['tuple']['revoke_access()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(NftRevokeParamsFactory.revokeAccess(params))
      return {...result, return: result.return as unknown as (undefined | NftRevokeReturns['revoke_access()void'])}
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `emergency_revoke()void` ABI method.
     *
     * Allow immediate revocation before expiry (e.g., if the prescription was misused)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyRevoke: async (params: CallParams<NftRevokeArgs['obj']['emergency_revoke()void'] | NftRevokeArgs['tuple']['emergency_revoke()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(NftRevokeParamsFactory.emergencyRevoke(params))
      return {...result, return: result.return as unknown as (undefined | NftRevokeReturns['emergency_revoke()void'])}
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `get_status()(address,uint64,uint64)` ABI method.
     *
     * Returns (current holder, expiry time, active flag)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getStatus: async (params: CallParams<NftRevokeArgs['obj']['get_status()(address,uint64,uint64)'] | NftRevokeArgs['tuple']['get_status()(address,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(NftRevokeParamsFactory.getStatus(params))
      return {...result, return: result.return as unknown as (undefined | NftRevokeReturns['get_status()(address,uint64,uint64)'])}
    },

    /**
     * Makes a call to the NFTRevoke smart contract using the `asset_transfer_from_app(asset,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetTransferFromApp: async (params: CallParams<NftRevokeArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftRevokeArgs['tuple']['asset_transfer_from_app(asset,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NftRevokeParamsFactory.assetTransferFromApp(params))
      return {...result, return: result.return as unknown as (undefined | NftRevokeReturns['asset_transfer_from_app(asset,account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NftRevokeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NFTRevoke app
   */
  state = {
    /**
     * Methods to access global state for the current NFTRevoke app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetid: result.assetid,
          accessHolder: result.access_holder,
          accessExpiresAt: result.access_expires_at,
          accessActive: result.access_active,
        }
      },
      /**
       * Get the current value of the assetid key in global state
       */
      assetid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetid")) as bigint | undefined },
      /**
       * Get the current value of the access_holder key in global state
       */
      accessHolder: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("access_holder")) as string | undefined },
      /**
       * Get the current value of the access_expires_at key in global state
       */
      accessExpiresAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("access_expires_at")) as bigint | undefined },
      /**
       * Get the current value of the access_active key in global state
       */
      accessActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("access_active")) as bigint | undefined },
    },
  }

  public newGroup(): NftRevokeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a asset_config_clawback(asset)void method call against the NFTRevoke contract
       */
      assetConfigClawback(params: CallParams<NftRevokeArgs['obj']['asset_config_clawback(asset)void'] | NftRevokeArgs['tuple']['asset_config_clawback(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetConfigClawback(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_to_asset(pay)void method call against the NFTRevoke contract
       */
      optInToAsset(params: CallParams<NftRevokeArgs['obj']['opt_in_to_asset(pay)void'] | NftRevokeArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a grant_access(account,uint64)void method call against the NFTRevoke contract
       */
      grantAccess(params: CallParams<NftRevokeArgs['obj']['grant_access(account,uint64)void'] | NftRevokeArgs['tuple']['grant_access(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.grantAccess(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a revoke_access()void method call against the NFTRevoke contract
       */
      revokeAccess(params: CallParams<NftRevokeArgs['obj']['revoke_access()void'] | NftRevokeArgs['tuple']['revoke_access()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.revokeAccess(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emergency_revoke()void method call against the NFTRevoke contract
       */
      emergencyRevoke(params: CallParams<NftRevokeArgs['obj']['emergency_revoke()void'] | NftRevokeArgs['tuple']['emergency_revoke()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyRevoke(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_status()(address,uint64,uint64) method call against the NFTRevoke contract
       */
      getStatus(params: CallParams<NftRevokeArgs['obj']['get_status()(address,uint64,uint64)'] | NftRevokeArgs['tuple']['get_status()(address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_status()(address,uint64,uint64)', v))
        return this
      },
      /**
       * Add a asset_transfer_from_app(asset,account)void method call against the NFTRevoke contract
       */
      assetTransferFromApp(params: CallParams<NftRevokeArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftRevokeArgs['tuple']['asset_transfer_from_app(asset,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetTransferFromApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the NFTRevoke contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NftRevokeComposer
  }
}
export type NftRevokeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the asset_config_clawback(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetConfigClawback(params?: CallParams<NftRevokeArgs['obj']['asset_config_clawback(asset)void'] | NftRevokeArgs['tuple']['asset_config_clawback(asset)void']>): NftRevokeComposer<[...TReturns, NftRevokeReturns['asset_config_clawback(asset)void'] | undefined]>

  /**
   * Calls the opt_in_to_asset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<NftRevokeArgs['obj']['opt_in_to_asset(pay)void'] | NftRevokeArgs['tuple']['opt_in_to_asset(pay)void']>): NftRevokeComposer<[...TReturns, NftRevokeReturns['opt_in_to_asset(pay)void'] | undefined]>

  /**
   * Calls the grant_access(account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantAccess(params?: CallParams<NftRevokeArgs['obj']['grant_access(account,uint64)void'] | NftRevokeArgs['tuple']['grant_access(account,uint64)void']>): NftRevokeComposer<[...TReturns, NftRevokeReturns['grant_access(account,uint64)void'] | undefined]>

  /**
   * Calls the revoke_access()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  revokeAccess(params?: CallParams<NftRevokeArgs['obj']['revoke_access()void'] | NftRevokeArgs['tuple']['revoke_access()void']>): NftRevokeComposer<[...TReturns, NftRevokeReturns['revoke_access()void'] | undefined]>

  /**
   * Calls the emergency_revoke()void ABI method.
   *
   * Allow immediate revocation before expiry (e.g., if the prescription was misused)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyRevoke(params?: CallParams<NftRevokeArgs['obj']['emergency_revoke()void'] | NftRevokeArgs['tuple']['emergency_revoke()void']>): NftRevokeComposer<[...TReturns, NftRevokeReturns['emergency_revoke()void'] | undefined]>

  /**
   * Calls the get_status()(address,uint64,uint64) ABI method.
   *
   * Returns (current holder, expiry time, active flag)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStatus(params?: CallParams<NftRevokeArgs['obj']['get_status()(address,uint64,uint64)'] | NftRevokeArgs['tuple']['get_status()(address,uint64,uint64)']>): NftRevokeComposer<[...TReturns, NftRevokeReturns['get_status()(address,uint64,uint64)'] | undefined]>

  /**
   * Calls the asset_transfer_from_app(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransferFromApp(params?: CallParams<NftRevokeArgs['obj']['asset_transfer_from_app(asset,account)void'] | NftRevokeArgs['tuple']['asset_transfer_from_app(asset,account)void']>): NftRevokeComposer<[...TReturns, NftRevokeReturns['asset_transfer_from_app(asset,account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the NFTRevoke smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NftRevokeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NftRevokeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NftRevokeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NftRevokeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NftRevokeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NftRevokeComposerResults<TReturns>>
}
export type NftRevokeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

